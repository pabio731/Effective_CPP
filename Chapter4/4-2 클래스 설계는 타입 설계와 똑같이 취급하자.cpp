/*
	새로운 클래스를 정의한다는 것 = 새로운 타입을 하나 정의한다는 것.
	다시 말해 클래스를 만든다는 것은 우리가 타입 설계자라는 뜻이다. 함수와 연산자를 오버로딩하고, 메모리를 할당 및 해제를 제어하면서
	객체를 초기화하고 종료하는 것 모두 개발자의 손에 달린 것. 따라서 클래스를 설계할 때는 언어 설계자가 기본제공 타입을 설계하는 것과 마찬가지로
	아주 세심하게 해주어야 한다.

	그럼 좋은 클래스란 무엇인가?
	1. 문법이 자연스러워야 한다.
	2. 의미구조가 직관적이여야 한다.
	3. 효율적인 구현이 가능해야 한다.

	위의 목표를 달성하기 위해서 클래스를 설계할 때 고려해야 할 점을 생각해보자
	1. 새로 정의한 타입의 객체 생성 및 소멸은 어떻게 이루어져야 하는가?
	   이 부분에 따라 생성자와 소멸자의 설계가 바뀐다. 또한 메모리 할당 연산자를
	   오버로딩 한다면 메모리 할당 함수의 설계에도 영향을 미침.

	2. 객체 초기화는 객체 대입과 어떻게 달라야 하는가?
	   생성자와 대입 연산자의 동작 및 둘 사이의 차이점을 결정짓는 요소.
	   초기화와 대입은 각각에 해당되는 함수호출이 아예 다르기 때문에 헷갈리지 않는 것이 중요하다

	3. 새로운 타입으로 만든 객체가 값에 의해 전달되는 경우에 어떤 의미를 줄 것인가?
	   값에 의한 전달을 수행하는 함수는 "복사 생성자"임을 잊지말자.

	4. 새로운 타입이 가질 수 있는 적법한 값에 대한 제약은 무엇으로 잡을 것인가?
	   클래스 데이터 멤버의 몇가지 조합 값만은 반드시 유효해야 한다.(전부는 아님)
	   이 조합을 클래스의 불변속성(Invariant)라고 하고, 클래스 차원에서 지켜주어야 한다.
	   이 불변속성에 따라 클래스 멤버 함수 안에서 해주어야할 에러 점검 루틴이 좌우 된다.
	   특히 각종 "쓰기"함수는 불변 속성에 의해 많이 좌우된다.
	   거기다 예외지정에도 불변속성이 영향을 주기 때문에 이를 고려 해야한다.

	5. 기존의  클래스 상송 계통망에 맞출 것인가?
	   만약 어떤 클래스로부터 상속을 시킨다고하면 해당 기본 클래스에 의해
	   제약을 받게 된다. 특히 가상함수인지, 비가상함수인지 여부가 가장 중요.
	   특히 가상 소멸자를 잊어서는 안된다.

	6. 어떤 종류의 타입 변환을 허용할 것인가?
	   기본적으로 우리가 만든 타입은 기존의 다른 타입들과 섞여서 어울려야 한다.
	   T1 타입의 객체를 T2타입의 객체로 암시적으로 변환되도록 하고 싶다면 T1클래스에
	   타입 변환 함수를 넣던가(operator T2), 또는 인자 하나로 호출될 수 있는
	   비명시호출(non-explicit)생성자를 T2 클래스에 넣어두어야 할 것.
	   만약 명시적 타입 변환만 허용하고 싶다면 해당 변환을 맡는 별도 이름의 함수를 만들되
	   타입 변환 연산자 혹은 비명시호출 생성자는 만들지 말아야 할 것.

	7. 어떤 연산자와 함수를 두어야 의미가 있을 것인가
	   어떤 것을 멤버 함수로 적당한 것과 그렇지 않은 것에 대한 구분이 필요하다.

	8. 표준 함수 중 어떤 것을 허용하지 말 것인가
	   해당 함수들은 private에 선언해야 할 것.

	9. 새로운 타입의 멤버에 대한 접근 권한을 어느 쪽에 줄 것인가?
	   어떤 클래스 멤버를 public, protected, private영역에 둘 것인가를 결정하는 데
	   필요한 질문이다. 또한 프렌드로 만들어야 할 클래스 및 함수를 정하는 것은 물론이며
	   한 클래스를 다른 클래스에 중첩시켜도 되는가에 대한 결정을 내리는 데도 필요하다.

   10."선언되지 않은 인터페이스"로 무엇을 둘 것인가?
	   개발자가 만든 타입이 제공할 보장이 어떤 종류일까에 대한 질문으로서,
	   보장할 수 있는 부분은 수행 성능 예외 안전성, 자원 사용이다.
	   이들에 대해 보장하겠다고 결정한 결과는 클래스 구현에 있어서 제약으로 작용한다.

   11. 새로 만드는 타입이 얼마나 일반적인가?
	   개발자가 만드는 것이 하나의 타입이 아니라 동일 계열의 "타입군" 전체가 될 수도 있다.
	   그렇다면 새로운 클래스 템플릿을 정의해야 할 것이다.

   12. 정말로 꼭 필요한 타입인가?
	   기존 클래스에 대해 기능 몇개가 아쉬워서 파생 클래스를 새로 뽑고 있다면,
	   차리리 간단하기 비멤버 함수라든지 템플릿을 몇 개 더 정의하는 편이 낫다.
*/